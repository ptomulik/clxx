# @COPYRIGHT@
# Licensed under MIT license (LICENSE.txt).

##############################################################################
# Checking for the existence/feasibility of certain OpenCL functions.
##############################################################################

Import('conf')

import SConsGnu.Cc


env = conf.env

cc = SConsGnu.Cc.CanonCC(env)

### Prefer locally installed OpenCL library.
##if env.Dir('#ext/OpenCL/lib').exists():
##    env.AppendUnique(LIBPATH = ['#ext/OpenCL/lib'])
##    # FIXME: the distinction should be made based on $LINK not $CC/$CXX
##    if cc == 'gcc' or cc == 'clang':
##        env.AppendUnique(LINKFLAGS = ['-Wl,-rpath-link=%s' % env.Dir('#ext/OpenCL/lib')])
### Prefer locally installed OpenCL and EGL headers over the system-wide.
##if env.Dir('#ext/OpenCL/include').exists():
##    env.AppendUnique(CPPPATH = ['#ext/OpenCL/include'])
##if env.Dir('#ext/EGL/include').exists():
##    env.AppendUnique(CPPPATH = ['#ext/EGL/include'])

# Prepare modified environment for the OpenCL checks
##orgEnv = conf.env
##conf.env = orgEnv.Clone()
##conf.env.AppendUnique(LIBS = ['OpenCL'])

for clver in ('1.0', '1.1', '1.2', '2.0', '2.1', '2.2'):
    if conf.CheckClHVersion(clver):
      cltag = clver.replace('.', '_')
      conf.Define('CLXX_B5D_OPENCL_CL_H_VERSION_%s' % cltag, 1, 'Library was built against CL/cl.h which had OpenCL %s features' % clver)

## # Restore the original environment
## ##conf.env = orgEnv
## # --without-cl-egl
## try:
##     if conf.env['ARGUMENTS']['WITHOUT_CL_EGL']:
##         conf.Define('CLXX_WITHOUT_CL_EGL', 1, 'Do not inclue CL/cl_egl.h')
## except KeyError:
##     pass

## # FIXME: for MAC-OS the header is OpenCL/cl.h
## conf.req_headers.append(('CL/cl.h','<>','C'))
## conf.req_libs.append({ 'library' : ['OpenCL'],
##                        'autoadd' : 0,
##                        'header'  : '#include <CL/cl.h>' })

# Local Variables:
# # tab-width:4
# # indent-tabs-mode:nil
# # End:
# vim: set syntax=scons expandtab tabstop=4 shiftwidth=4:
