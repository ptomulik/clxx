
# @COPYRIGHT@
# Licensed under MIT license (LICENSE.txt).

import os
#from SCons.Util import CLVar
#from SConsGnu import GVars, AcDirVars, CcVars
#from SConsGnu.GVars import GVarDeclsU
# We're migrating from SConsGnu.GVars to SConsCommonArguments and so on...

import SConsArguments

Import(['env'])

##############################################################################
def munge_os_environ(ose):
    """Apply appropriate converters to variables from OS environment"""
    import SConsArguments.Util
    flags = ['CCFLAGS', 'CFLAGS', 'CPPDEFINES', 'CPPFLAGS', 'SHCCFLAGS',
             'SHCFLAGS', 'CXXFLAGS', 'SHCXXFLAGS', 'SWIGFLAGS']
    result = ose.copy()
    for flag in flags:
        try:
            result[flag] = SConsArguments.Util.flags2list(ose[flag])
        except KeyError:
            pass
    return result
##############################################################################

variables = Variables('.scons.variables')

##############################################################################
# Declare local CLI variables
##############################################################################
decls = SConsArguments.DeclareArguments(
    CLXX_ENABLE_GCOV = {
        'env_key'   : 'CLXX_ENABLE_GCOV',
        'var_key'   : 'CLXX_ENABLE_GCOV',
        'help'      : 'Compile with GCOV support',
        'default'   : 'no'
    },
    WITHOUT_CL_EGL = {
        'env_key'   : 'WITHOUT_CL_EGL',
#        'var_key'   : 'WITHOUT_CL_EGL',
        'opt_key'   : 'WITHOUT_CL_EGL',
        'option'    : '--without-cl-egl',
        'action'    : 'store_true',
        'help'      : 'Do not include CL/cl_egl.h, even if it is available'
    }
)
decls.update(SConsArguments.ImportArguments(['swig', 'cc', 'c++'], env_key_prefix = 'CLI_'))
##############################################################################
# Declare some standard CLI variables
##############################################################################
##decls.update(CcVars.DeclareGVars(defaults = env, env_key_transform = lambda s : 'CLI_%s' % s))
## FIXME: we need something similar to AcDirVars to implement customized
##        installation directories
##decls.update(AcDirVars.DeclareGVars(defaults = env))
##decls.update(SConsCommonArguments.cc.Declarations(defaults = env, env_key_transform = lambda s : 'CLI_%s' % s))
####decls.update(SConsCommonArguments.CC.Declarations(defaults = env))
##decls.update(SConsGnuArguments.AltPrograms.Declarations(defaults = env))
##############################################################################


# Let anyone else downwards to inject its CLI options and variables.
##SConscript('xyz/SConscript.cli', exports = ['env', 'decls'])

##############################################################################
# Incorporate Arguments into environment
##############################################################################
args = decls.Commit(env, variables, True)
osenv = munge_os_environ(os.environ)
# FIXME: in fact, variables should be saved only on demand ('configure' target)
#        so by default filename should be None
new = args.Postprocess(env, variables, True, osenv, filename='.scons.variables')
env['ARGUMENTS'] = args.EnvProxy(env) # so we can do env['ARGUMENTS']['XYZ'].
env['CHANGED_VARIABLES'] = new
##############################################################################

##############################################################################
# Additional --help-variables option to list available CLI variables.
##############################################################################
AddOption( '--help-variables', dest='help_variables', action='store_true',
           help='print help for CLI variables' )
if GetOption('help_variables'):
    print(args.GenerateVariablesHelpText(variables, env, True))
    Exit(0)
##############################################################################

# Local Variables:
# # tab-width:4
# # indent-tabs-mode:nil
# # End:
# vim: set syntax=scons expandtab tabstop=4 shiftwidth=4:
